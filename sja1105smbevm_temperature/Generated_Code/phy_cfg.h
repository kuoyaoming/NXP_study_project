/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : phy_cfg.h
**     Project     : sja1105smbevm_tc10example
**     Processor   : MPC5748G_256
**     Component   : phy
**     Version     : Component SDK_S32_PA_11, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32_PA_11
**     Compiler    : GNU C Compiler
**     Date/Time   : 2023-07-11, 10:21, # CodeGen: 0
**     Contents    :
**         PHY_FrameworkInit    - status_t PHY_FrameworkInit(phy_config_t * phyConfig,phy_driver_t ** phyDrivers);
**         PHY_Init             - status_t PHY_Init(uint8_t phy);
**         PHY_Reset            - status_t PHY_Reset(uint8_t phy);
**         PHY_MainFunction     - status_t PHY_MainFunction(uint8_t phy);
**         PHY_GetId            - status_t PHY_GetId(uint8_t phy,phy_id_t * id);
**         PHY_GetState         - status_t PHY_GetState(uint8_t phy,phy_state_t * state);
**         PHY_GetLinkStatus    - status_t PHY_GetLinkStatus(uint8_t phy,bool * linkUp);
**         PHY_GetLinkSpeed     - status_t PHY_GetLinkSpeed(uint8_t phy,phy_speed_t * speed);
**         PHY_GetDelay         - status_t PHY_GetDelay(uint8_t phy,phy_delay_t * delay);
**         PHY_Suspend          - status_t PHY_Suspend(uint8_t phy);
**         PHY_Resume           - status_t PHY_Resume(uint8_t phy);
**         PHY_SleepAbortReject - status_t PHY_SleepAbortReject(uint8_t phy);
**         PHY_Sleep            - status_t PHY_Sleep(uint8_t phy);
**         PHY_Wakeup           - status_t PHY_Wakeup(uint8_t phy);
**         PHY_SetRole          - status_t PHY_SetRole(uint8_t phy,phy_role_t role);
**         PHY_SetLoopback      - status_t PHY_SetLoopback(uint8_t phy,phy_loopback_t loopbackMode);
**         PHY_SelectTestMode   - status_t PHY_SelectTestMode(uint8_t phy,uint8_t testModeIndex);
**         PHY_EnableInterrupts - status_t PHY_EnableInterrupts(uint8_t phy);
**         PHY_HandleInterrupt  - status_t PHY_HandleInterrupt(uint8_t phy);
**         PHY_EnableAutoneg    - status_t PHY_EnableAutoneg(uint8_t phy);
**         PHY_DisableAutoneg   - status_t PHY_DisableAutoneg(uint8_t phy);
**         PHY_RestartAutoneg   - status_t PHY_RestartAutoneg(uint8_t phy);
**         PHY_Write            - status_t PHY_Write(uint8_t phy,uint8_t registerAddr,uint16_t value);
**         PHY_Read             - status_t PHY_Read(uint8_t phy,uint8_t registerAddr,uint16_t * value);
**         PHY_RMW              - status_t PHY_RMW(uint8_t phy,uint8_t registerAddr,uint16_t value,uint16_t mask);
**         PHY_WriteMMD         - status_t PHY_WriteMMD(uint8_t phy,uint8_t mmd,uint16_t registerAddr,uint16_t...
**         PHY_ReadMMD          - status_t PHY_ReadMMD(uint8_t phy,uint8_t mmd,uint16_t registerAddr,uint16_t *...
**         PHY_RMWMMD           - status_t PHY_RMWMMD(uint8_t phy,uint8_t mmd,uint16_t registerAddr,uint16_t...
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc. 
**     Copyright 2016-2017 NXP 
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file phy_cfg.h                                                  
** @version 01.00
*/         
/*!
**  @addtogroup phy_cfg_module phy_cfg module documentation
**  @{
*/         
#ifndef PHY_CFG_H
#define PHY_CFG_H

/* MODULE phy. */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, global macro not referenced
 * There are global macros defined to be used by the integrator and another one used as include guard.
 */

/* Include inherited beans */
#include "enet_sw.h"
#include "Cpu.h"
#include "phy.h"

/*! @brief Number of PHY devices */
#define N_PHY_DEVS (8U)
/*! @brief Number of PHY drivers */
#define N_PHY_DRIVERS (2U)

/*! @brief Definition of names for the PHY instances */
#define PHY_INSTANCE_0 (0U)
#define PHY_INSTANCE_1 (1U)
#define PHY_INSTANCE_2 (2U)
#define PHY_INSTANCE_3 (3U)
#define PHY_INSTANCE_4 (4U)
#define PHY_INSTANCE_5 (5U)
#define PHY_INSTANCE_6 (6U)
#define PHY_INSTANCE_7 (7U)

extern phy_config_t  phyConfig[N_PHY_DEVS];      /*! @brief Array of PHY configuration structures */
extern phy_driver_t* phyDrivers[N_PHY_DRIVERS];  /*! @brief Array of pointers towards the driver structures */

/*! @brief PHY framework callbacks */
void phy_callbacks_linkUpEventCB(uint8_t phy);
void phy_callbacks_linkDownEventCB(uint8_t phy);
void phy_callbacks_autonegCompleteCB(uint8_t phy);
void phy_callbacks_autonegFailedCB(uint8_t phy);

#endif
/* ifndef PHY_CFG_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/

