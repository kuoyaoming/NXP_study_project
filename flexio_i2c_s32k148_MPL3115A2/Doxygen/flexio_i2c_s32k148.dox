/*!
    @page flexio_i2c_s32k148_group FLEXIO I2C
    @brief Example application showing FlexIO I2C driver usage

    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the FlexIO I2C driver found
    on the S32K148 SoC using S32 SDK API.

    The application uses FlexIO I2C driver as master to make a send and a receive data request. The slave device for this example is the LPI2C instance, which is configured to act as a bus slave.
    The setup can't be changed to use FlexIO I2C as slave because this mode is not supported by FlexIO module.
    The slave and master buffers will be checked after each transfer by the application, user shall check \b isTransferOk variable to see if the transmissions are successful. If transfers is \b Ok, the \b LED on board will turn \b Green, otherwise the \b LED will turn \b RED.


    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K148EVB-Q176 board
    - 1 Power Adapter 12V (if the board can't be powered from the USB)
    - 1 Personal Computer
    - 1 PEMicro Multilink Debugger
    - 1 Jlink Lite Debugger

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K148EVB-Q176

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION            |S32K148EVB-Q176             | S32K148-MB      |
    ------------------------|----------------------------|-----------------|
    FLEXIO SDA  (\b PTA11)  | J5.6  - J4.16              | J9.22  - J11.2  |
    FLEXIO SCL  (\b PTA0)   | J4.15 - J5.14              | J9.31  - J13.32 |
    LPI2C SDA   (\b PTC31)  | J4.16 - J5.6               | J11.2  - J9.22  |
    LPI2C SCL   (\b PTE1)   | J5.14 - J4.15              | J13.32 - J9.31  |
    RED_LED     (\b PTE21)  | RGB_RED - wired on board   |                 |
    GREEN_LED   (\b PTE22)  | RGB_GREEN - wired on board |                 |

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New -> \b S32DS \b Project \b From \bExample and select \b flexio_i2c_s32k148. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    Left click on the current project, then click "Open S32 Configuration" (it has blue chip symbol on the top of the toolbar).
    In S32 Configuration menu, click on the desired configurator (Pins, Clock, Peripherals, etc.). Clicking on any one of those will generate all the components.
    Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
    Make the desired changes (if any) then click "Update Code".
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Debugging the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b flexio_i2c_s32k148_debug_ram_jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b flexio_i2c_s32k148_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b flexio_i2c_s32k148_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b flexio_i2c_s32k148_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/

