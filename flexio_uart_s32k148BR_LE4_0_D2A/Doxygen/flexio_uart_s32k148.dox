/*!
    @page flexio_uart_s32k148_group FLEXIO UART
    @brief Example application showing FlexIO UART driver usage

    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the FlexIO UART driver found
    on the S32K148 SoC using S32 SDK API.

    Two instances of the FlexIO UART driver are used to display a welcome message ("Hello World") and then echo the data received from host.

    User shall send a string. If the board receives the user's string, then the same string shall be sent again.

    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K148 board
    - 1 Power Adapter 12V (if the board can't be powered from the USB)
    - 2 Dupont female to female cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger or 1 PEmicro Debugger (optional, users can use Open SDA)
    - UART to USB converter if it is not included on the target board. (Please consult your boards documentation to check if UART-USB converter is present).

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K148EVB-Q176

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION                | S32K148EVB-Q176
    ----------------------------|-------------------
    FLEXIO_UART RX  (\b PTA11)  |   J5.6 - J6.11
    FLEXIO_UART TX  (\b PTA0)   |   J4.15 - J6.8

    @note The application uses on board USB - UART chips to transfer data from board to host PC. Use an USB type B cable to connect to the J16 connector on the mainboard.

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New -> \b S32DS \b Project \b From \bExample and select \b flexio_uart_s32k148. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    Left click on the current project, then click "Open S32 Configuration" (it has blue chip symbol on the top of the toolbar).
    In S32 Configuration menu, click on the desired configurator (Pins, Clock, Peripherals, etc.). Clicking on any one of those will generate all the components.
    Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
    Make the desired changes (if any) then click "Update Code".
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Debugging the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b flexio_uart_s32k148_debug_ram_jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b flexio_uart_s32k148_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b flexio_uart_s32k148_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b flexio_uart_s32k148_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______
    For this example it is necessary to open a terminal emulator and configure it with:
    -   115200 baud
    -   One stop bit
    -   No parity
    -   No flow control

*/

